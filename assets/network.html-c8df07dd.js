import{_ as n,M as a,p as s,q as c,R as e,t,N as d,V as i,a1 as o}from"./framework-3547d075.js";const r={},h=o('<h1 id="network" tabindex="-1"><a class="header-anchor" href="#network" aria-hidden="true">#</a> Network</h1><h2 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h2><table><tr><td><table><thead><tr><th>Firmware</th><th>Versions</th></tr></thead><tbody><tr><td>Stock</td><td><code>&gt;= 3.0.0.4.380.x</code></td></tr><tr><td>Merlin</td><td><code>&gt;= 3.0.0.4.380.x</code></td></tr></tbody></table></td><td><table><thead><tr><th>Device mode</th><th>Available</th></tr></thead><tbody><tr><td>Router</td><td>ðŸ’š</td></tr><tr><td>AiMesh Node</td><td>ðŸ’š</td></tr></tbody></table></td></tr></table><h2 id="sensor" tabindex="-1"><a class="header-anchor" href="#sensor" aria-hidden="true">#</a> Sensor</h2><h3 id="device-interface-download" tabindex="-1"><a class="header-anchor" href="#device-interface-download" aria-hidden="true">#</a> <code>{device}_{interface}_download</code></h3><p><code>AsusRouter &gt;= 0.1.0</code></p>',6),u=e("li",null,[e("p",null,[t("Default entity state: "),e("code",null,"Enabled")])],-1),_=e("li",null,[e("p",null,[t("Type: "),e("code",null,"float"),t(" | "),e("code",null,"integer")])],-1),p=e("code",null,"bit",-1),f=e("code",null,"kbit",-1),b=e("code",null,"Mbit",-1),v=e("code",null,"Gbit",-1),w=e("code",null,"B",-1),y=e("code",null,"kB",-1),g=e("code",null,"MB",-1),m=e("code",null,"GB",-1),k=o('<li><p>Default units: <code>GB</code></p></li><li><p>Details:</p><p>The total amount of traffic downloaded via <code>{interface}</code> since the last reboot of the device or traffic overflow.</p><h4 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h4><ul><li><h5 id="bytes" tabindex="-1"><a class="header-anchor" href="#bytes" aria-hidden="true">#</a> bytes</h5><ul><li><p>Type: <code>integer</code></p></li><li><p>Units: <code>B</code></p></li><li><p>Details:</p><p>The raw traffic value as obtained from the device.</p></li></ul></li></ul></li>',2),B=e("h3",{id:"device-interface-download-speed",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#device-interface-download-speed","aria-hidden":"true"},"#"),t(),e("code",null,"{device}_{interface}_download_speed")],-1),x=e("p",null,[e("code",null,"AsusRouter >= 0.1.0")],-1),T=e("li",null,[e("p",null,[t("Default entity state: "),e("code",null,"Enabled")])],-1),D=e("li",null,[e("p",null,[t("Type: "),e("code",null,"float"),t(" | "),e("code",null,"integer")])],-1),M=e("code",null,"bit/s",-1),A=e("code",null,"kbit/s",-1),G=e("code",null,"Mbit/s",-1),U=e("code",null,"Gbit/s",-1),R=e("code",null,"B/s",-1),N=e("code",null,"kB/s",-1),V=e("code",null,"MB/s",-1),E=e("code",null,"GB/s",-1),q=o('<li><p>Default units: <code>Mbit/s</code></p></li><li><p>Details:</p><p>The average download speed via <code>{interface}</code> over the last <code>t</code> seconds, where <code>t</code> is the time interval between fetching network data.</p><p>The sensor requires 2 consecutive polls of data from the device to start showing an actual state. Until then, the sensor state will be reported as <code>unknown</code>.</p><h4 id="attributes-1" tabindex="-1"><a class="header-anchor" href="#attributes-1" aria-hidden="true">#</a> Attributes</h4><ul><li><h5 id="bytes-1" tabindex="-1"><a class="header-anchor" href="#bytes-1" aria-hidden="true">#</a> bytes</h5><ul><li><p>Type: <code>integer</code></p></li><li><p>Units: <code>bits/s</code></p></li><li><p>Details:</p><p>The average speed value as calculated from the traffic.</p></li></ul></li></ul></li>',2),L=e("h3",{id:"device-interface-upload",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#device-interface-upload","aria-hidden":"true"},"#"),t(),e("code",null,"{device}_{interface}_upload")],-1),S=e("p",null,[e("code",null,"AsusRouter >= 0.1.0")],-1),C=e("li",null,[e("p",null,[t("Default entity state: "),e("code",null,"Enabled")])],-1),F=e("li",null,[e("p",null,[t("Type: "),e("code",null,"float"),t(" | "),e("code",null,"integer")])],-1),j=e("code",null,"bit",-1),z=e("code",null,"kbit",-1),H=e("code",null,"Mbit",-1),I=e("code",null,"Gbit",-1),J=e("code",null,"B",-1),K=e("code",null,"kB",-1),O=e("code",null,"MB",-1),P=e("code",null,"GB",-1),Q=o('<li><p>Default units: <code>GB</code></p></li><li><p>Details:</p><p>The total amount of traffic uploaded via <code>{interface}</code> since the last reboot of the device or traffic overflow.</p><h4 id="attributes-2" tabindex="-1"><a class="header-anchor" href="#attributes-2" aria-hidden="true">#</a> Attributes</h4><ul><li><h5 id="bytes-2" tabindex="-1"><a class="header-anchor" href="#bytes-2" aria-hidden="true">#</a> bytes</h5><ul><li><p>Type: <code>integer</code></p></li><li><p>Units: <code>B</code></p></li><li><p>Details:</p><p>The raw traffic value as obtained from the device.</p></li></ul></li></ul></li>',2),W=e("h3",{id:"device-interface-upload-speed",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#device-interface-upload-speed","aria-hidden":"true"},"#"),t(),e("code",null,"{device}_{interface}_upload_speed")],-1),X=e("p",null,[e("code",null,"AsusRouter >= 0.1.0")],-1),Y=e("li",null,[e("p",null,[t("Default entity state: "),e("code",null,"Enabled")])],-1),Z=e("li",null,[e("p",null,[t("Type: "),e("code",null,"float"),t(" | "),e("code",null,"integer")])],-1),$=e("code",null,"bit/s",-1),ee=e("code",null,"kbit/s",-1),te=e("code",null,"Mbit/s",-1),oe=e("code",null,"Gbit/s",-1),le=e("code",null,"B/s",-1),de=e("code",null,"kB/s",-1),ie=e("code",null,"MB/s",-1),ne=e("code",null,"GB/s",-1),ae=o('<li><p>Default units: <code>Mbit/s</code></p></li><li><p>Details:</p><p>The average upload speed via <code>{interface}</code> over the last <code>t</code> seconds, where <code>t</code> is the time interval between fetching network data.</p><p>The sensor requires 2 consecutive polls of data from the device to start showing an actual state. Until then, the sensor state will be reported as <code>unknown</code>.</p><h4 id="attributes-3" tabindex="-1"><a class="header-anchor" href="#attributes-3" aria-hidden="true">#</a> Attributes</h4><ul><li><h5 id="bytes-3" tabindex="-1"><a class="header-anchor" href="#bytes-3" aria-hidden="true">#</a> bytes</h5><ul><li><p>Type: <code>integer</code></p></li><li><p>Units: <code>bits/s</code></p></li><li><p>Details:</p><p>The average speed value as calculated from the traffic.</p></li></ul></li></ul></li>',2);function se(ce,re){const l=a("RouterLink");return s(),c("div",null,[h,e("ul",null,[u,_,e("li",null,[e("p",null,[t("Units: ["),p,t(", "),f,t(", "),b,t(", "),v,t(", "),w,t(", "),y,t(", "),g,t(", "),m,t("] ("),d(l,{to:"/guide/configuration/network-interfaces.html"},{default:i(()=>[t("how to select")]),_:1}),t(")")])]),k]),B,x,e("ul",null,[T,D,e("li",null,[e("p",null,[t("Units: ["),M,t(", "),A,t(", "),G,t(", "),U,t(", "),R,t(", "),N,t(", "),V,t(", "),E,t("] ("),d(l,{to:"/guide/configuration/network-interfaces.html"},{default:i(()=>[t("how to select")]),_:1}),t(")")])]),q]),L,S,e("ul",null,[C,F,e("li",null,[e("p",null,[t("Units: ["),j,t(", "),z,t(", "),H,t(", "),I,t(", "),J,t(", "),K,t(", "),O,t(", "),P,t("] ("),d(l,{to:"/guide/configuration/network-interfaces.html"},{default:i(()=>[t("how to select")]),_:1}),t(")")])]),Q]),W,X,e("ul",null,[Y,Z,e("li",null,[e("p",null,[t("Units: ["),$,t(", "),ee,t(", "),te,t(", "),oe,t(", "),le,t(", "),de,t(", "),ie,t(", "),ne,t("] ("),d(l,{to:"/guide/configuration/network-interfaces.html"},{default:i(()=>[t("how to select")]),_:1}),t(")")])]),ae])])}const ue=n(r,[["render",se],["__file","network.html.vue"]]);export{ue as default};
